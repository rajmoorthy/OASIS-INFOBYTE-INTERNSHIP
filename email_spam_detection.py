# -*- coding: utf-8 -*-
"""email_spam_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-l1bKDhCrFr-r9pG0rW6HVD0zXBIiJu
"""

import numpy as np                 #importing necessarry libraries
import matplotlib.pyplot as plt
import pandas as pd
data = pd.read_csv('/content/spam.csv', encoding='latin-1')   #loading the dataset which downloaded from given datasets
data

# Data exploration (optional)
print(data.head())  # Display the first few rows

print(data.columns)#accessing the columns

# Clean up the dataset by selecting only relevant columns if they exist
if 'v1' in data.columns and 'v2' in data.columns:
    data = data[['v1', 'v2']]  # Selecting only 'v1' (label) and 'v2' (email content)
    data.columns = ['Label', 'Email']  # Renaming columns to 'Label' and 'Email'

data

# Convert labels to binary values: 'spam' to 1 and 'ham' (not spam) to 0
data['Label'] = data['Label'].map({'spam': 1, 'ham': 0})
data

from re import X
# Splitting dataset into features (X) and target (y)
x = data['Email']
y = data['Label']
x

y

# Split data into training and testing sets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
x_train

y_test

# Vectorize the text data using CountVectorizer (Bag-of-Words model)
from sklearn.feature_extraction.text import CountVectorizer# vectorization is a key step in feature extraction that converts text data into vectors to train machine learning algorithms.
vectorizer = CountVectorizer(stop_words='english')  # Remove common English stop words
x_train_vec = vectorizer.fit_transform(x_train)
x_test_vec = vectorizer.transform(x_test)
x_train_vec

# Initialize the Naive Bayes model
from sklearn.naive_bayes import MultinomialNB #Naive Bayes is a statistical classification technique that uses Bayes' Theorem to predict the probability of an event based on a set of features
model = MultinomialNB()
# Train the model
model.fit(x_train_vec, y_train)

# Make predictions on the test set
y_pred = model.predict(x_test_vec)
y_pred

# Evaluate the model's performance
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Confusion Matrix
from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

# Classification Report
from sklearn.metrics import classification_report
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Test the model on a new email
def predict_spam(email_text):
    email_vec = vectorizer.transform([email_text])  # Transform the email into the same vector space
    prediction = model.predict(email_vec)
    return "Spam" if prediction[0] == 1 else "Not Spam"

# Example email
new_email = "Congratulations! You've won a free vacation to the Bahamas. Call now to claim your prize."
print("New Email Prediction:")
print(predict_spam(new_email))