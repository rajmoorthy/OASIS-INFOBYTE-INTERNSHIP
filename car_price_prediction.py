# -*- coding: utf-8 -*-
"""Car Price Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1old-5SIe-dBuqatH6g7UzbqWwcTIoyRa
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn.metrics as mse
from mpl_toolkits.mplot3d import Axes3D
d = pd.read_csv('/content/car data.csv')
d.head(40)

d.isna().sum()

d.info()

from sklearn.preprocessing import LabelEncoder

# Initialize LabelEncoder
le = LabelEncoder()

# Fit and transform the categorical columns
d['Car_Name'] = le.fit_transform(d['Car_Name'])
d['Driven_kms'] = le.fit_transform(d['Driven_kms'])
d['Fuel_Type'] = le.fit_transform(d['Fuel_Type'])

# No need to use join here, as you can assign the transformed columns directly to the dataframe.
# Display the updated dataframe
print(d)

x=pd.DataFrame(d,columns=['Fuel_Type','Driven_kms'])
y=pd.DataFrame(d,columns=['Present_Price'])
df=pd.concat([x,y],axis=1)
df

correlation_matrix = x.corr()
correlation_matrix

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)
x_train

plt.figure(figsize = (5,5))
sns.heatmap(correlation_matrix, cmap = 'coolwarm',vmin = -1, vmax = 1, center = 0, annot=True, fmt=".2f",
square=True, linewidths=.5)
plt.show()

x_test

y_train

y_test

regressor= LinearRegression()
regressor.fit(x_train, y_train)

#Prediction of Test and Training set result
y_pred= regressor.predict(x_test)
x_pred= regressor.predict(x_train)
# Regression coefficients
print('Coefficients: ', regressor.coef_)
#Regression intercept
print('Intercept:',regressor.intercept_)
# Variance score: 1 means perfect prediction
print('Variance score: {}'.format(regressor.score(x_test, y_test)))

#The Mean Squared Error measures how close a regression line is to a set of data points
import sklearn.metrics as mse
mse=mse.mean_squared_error(y_test,y_pred)
print("mean squared error:",mse)
"Prediced_car_price:",mse