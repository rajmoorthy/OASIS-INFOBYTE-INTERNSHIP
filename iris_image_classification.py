# -*- coding: utf-8 -*-
"""iris image classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k1u8cFqepfwEsmn5Vatcwskmbv87fstZ
"""

import numpy as np                 #importing necessarry libraries
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd
df = pd.read_csv('/content/Iris.csv')   #loading the dataset which downloaded from given datasets
df

df.columns  #accessing the columns

img=mpimg.imread('/content/iris_types.jpg')  #accessing the images of various flowers with different petals and sepals
plt.figure(figsize=(20,40))    #geting necessarry width and length of photo
plt.axis('off')
plt.imshow(img)      #loading the image

x = df.iloc[:,:4].values
y = df['Species'].values # Change 'class' to 'variety'
x,y

#splitting datasets into training set and testing set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 82)
x_train

x_test

y_train

y_test

#scaling the inconsisitent values
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
x_test

#fit the model for prediction
from sklearn.linear_model import LogisticRegression
logisticregression = LogisticRegression()
logisticregression.fit(x_train, y_train)

#prediction
y_pred = logisticregression.predict(x_test)
y_pred

#importing confusion matrix to compare predicted values with actual values
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
cm

from sklearn.metrics import classification_report as cr
print(cr(y_test,y_pred))

import seaborn as sn
sn.heatmap(cm,annot=True)

accuracy_score=(cm[0,0]+cm[1,1])/(cm[0,0]+cm[0,1]+cm[1,0]+cm[1,1])
print("Accuracy Score:",accuracy_score)

recall=cm[0,0]/(cm[0,0]+cm[0,1])
print("Recall:", recall)

precision=cm[0,0]/(cm[0,0]+cm[1,0])
print("Precision:",precision)

f1_score=(2*precision*recall)/(precision+recall)
print("F1 Score:",f1_score)

support = cm[0,0]+cm[0,1]
print("Support:",support)

log_loss=np.log(accuracy_score)
print("Log Loss:",log_loss)

prediction = logisticregression.predict( [[6.7  ,3.0  ,5.2  ,2.3  ]] )
print("Prediction:", prediction)